// Generated by jextract

package de.schmizzolin.vish.signal;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct sigaction {
 *     void (*sa_handler)(int);
 *     int sa_mask;
 *     int sa_flags;
 * };
 * }
 */
public class sigaction {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$0;
    }
    public interface sa_handler {

        void apply(int _x0);
        static MemorySegment allocate(sa_handler fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$0.const$2, fi, constants$0.const$1, scope);
        }
        static sa_handler ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (int __x0) -> {
                try {
                    constants$0.const$3.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static void sa_handler$set(MemorySegment seg, MemorySegment x) {
        constants$0.const$4.set(seg, x);
    }
    public static void sa_mask$set(MemorySegment seg, int x) {
        constants$0.const$5.set(seg, x);
    }

    static final VarHandle xxx = constants$0.const$0.varHandle(MemoryLayout.PathElement.groupElement("sa_flags"));
    public static void sa_flags$set(MemorySegment seg, int x) {
        xxx.set(seg, x);
    }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
}


